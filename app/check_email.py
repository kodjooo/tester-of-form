import imaplib
import email
from email.header import decode_header
from datetime import datetime, timedelta
import requests
import logging
import os
import time

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
LOG_DIR = os.getenv("LOG_DIR", "logs")
os.makedirs(LOG_DIR, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, "form_checker.log"), encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

DELETE_AFTER_PROCESSING = os.getenv("DELETE_AFTER_PROCESSING", "true").lower() == "true"  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.gmail.com")
IMAP_PORT = int(os.getenv("IMAP_PORT", "993"))
EMAIL_ACCOUNT = os.getenv("EMAIL_ACCOUNT", "")  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD", "")  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
LOOKBACK_MINUTES = int(os.getenv("LOOKBACK_MINUTES", "15"))

# === –¢–ï–õ–ï–ì–†–ê–ú ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# === –ù–ê–°–¢–†–û–ô–ö–ò RETRY ===
TELEGRAM_MAX_RETRIES = int(os.getenv("TELEGRAM_MAX_RETRIES", "3"))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
TELEGRAM_RETRY_DELAY = float(os.getenv("TELEGRAM_RETRY_DELAY", "1.0"))  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
TELEGRAM_TIMEOUT = int(os.getenv("TELEGRAM_TIMEOUT", "30"))  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# === –î–ê–ù–ù–´–ï –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –§–û–†–ú ===
FORMS = {
    "metawebart.com": {
        "–§–æ—Ä–º–∞ 1": [
            "Metawebart.com",
            "mark.aborchie@gmail.com",
            "+35800000000"
        ],
        "–§–æ—Ä–º–∞ 2": [
            "Metawebart.com",
            "+35800000000"
        ],
        "–§–æ—Ä–º–∞ 3": [
            "Metawebart.com",
            "mark.aborchie@gmail.com",
            "+35811111111"
        ],
        "–§–æ—Ä–º–∞ 4": [
            "Metawebart.com",
            "+35811111111"
        ]
    },
    "meta-sistem.md": {
        "–§–æ—Ä–º–∞ 5": [
            "meta-sistem.md",
            "mark.aborchie@gmail.com",
            "+79990000000"
        ],
        "–§–æ—Ä–º–∞ 6": [
            "meta-sistem.md",
            "mark.aborchie@gmail.com",
            "+79990000001",
            "https://meta-test.com/"
        ]
    }
}


def fetch_recent_messages():
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –∏ –∏—â–µ–º –ø–∏—Å—å–º–∞...")
    try:
        mailbox = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mailbox.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
        mailbox.select("inbox")

        since = (datetime.now() - timedelta(minutes=LOOKBACK_MINUTES)).strftime("%d-%b-%Y")
        status, messages = mailbox.search(None, f'(SINCE "{since}")')

        if status != "OK":
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å–µ–º")
            mailbox.logout()
            return []

        message_ids = messages[0].split()
        emails = []

        logger.info(f"üì© –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(message_ids)}")

        for msg_id in reversed(message_ids):
            status, msg_data = mailbox.fetch(msg_id, "(RFC822)")
            if status != "OK":
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ ID {msg_id}")
                continue

            msg = email.message_from_bytes(msg_data[0][1])
            subject, encoding = decode_header(msg["Subject"])[0]
            msg_date_raw = msg.get("Date")
            msg_date_str = msg_date_raw or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if isinstance(subject, bytes):
                subject = subject.decode(encoding or "utf-8")

            body = ""
            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        body = part.get_payload(decode=True).decode(errors="ignore")
                        break
            else:
                body = msg.get_payload(decode=True).decode(errors="ignore")

            emails.append({
                "msg_id": msg_id,
                "subject": subject,
                "body": body,
                "date": msg_date_str,
                "short_body": body[:100].replace("\n", " ").strip()
            })

        mailbox.logout()
        return emails

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:")
        return []


def check_forms(emails):
    report = []
    debug_logs = []
    matched_msg_ids = set()

    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏—Å–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞–º...")

    for site, forms in FORMS.items():
        report.append(f"\n–°–∞–π—Ç {site}")
        for form_name, conditions in forms.items():
            found = False
            form_debug = f"\n‚û°Ô∏è {form_name}:"

            for email_data in emails:
                msg_date_str = email_data.get("date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                short_body = email_data.get("short_body", "")
                subject = email_data["subject"]
                body = email_data["body"]

                matched = []
                missing = []

                for c in conditions:
                    c_lower = c.lower()
                    if c_lower in subject.lower() or c_lower in body.lower():
                        matched.append(c)
                    else:
                        missing.append(c)

                if not missing:
                    found = True
                    matched_msg_ids.add(email_data["msg_id"])
                    form_debug += f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ–º–æ–π –∏ —Ç–µ–ª–æ–º."
                    break
                else:
                    form_debug += f"\n‚ùå –ü–∏—Å—å–º–æ: \"{subject.strip()}\""
                    form_debug += f"\n   –ü–æ–ª—É—á–µ–Ω–æ: {msg_date_str}"
                    form_debug += f"\n   –¢–µ–ª–æ (–Ω–∞—á–∞–ª–æ): \"{short_body}\""
                    form_debug += f"\n   - –°–æ–≤–ø–∞–ª–∏: {matched}"
                    form_debug += f"\n   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing}"

            status = "—Ä–∞–±–æ—Ç–∞–µ—Ç" if found else "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            report.append(f"{form_name} - {status}")
            debug_logs.append(form_debug)

    return "\n".join(report), "\n".join(debug_logs), matched_msg_ids


def delete_emails(msg_ids):
    if not DELETE_AFTER_PROCESSING or not msg_ids:
        logger.info("‚úâÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Å–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return

    try:
        logger.info(f"üóë –£–¥–∞–ª—è–µ–º –ø–∏—Å—å–º–∞ (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É), –≤—Å–µ–≥–æ: {len(msg_ids)}")
        mailbox = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mailbox.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
        mailbox.select("inbox")
        for msg_id in msg_ids:
            mailbox.store(msg_id, '+X-GM-LABELS', '\\Trash')  # Gmail way
        mailbox.logout()
        logger.info("‚úÖ –ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å–µ–º:")


def send_telegram_message(text):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å retry-–ª–æ–≥–∏–∫–æ–π –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID, 
        "text": text, 
        "parse_mode": "HTML"
    }
    
    for attempt in range(1, TELEGRAM_MAX_RETRIES + 1):
        try:
            if attempt == 1:
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram...")
            else:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ({attempt}/{TELEGRAM_MAX_RETRIES})")
            
            resp = requests.post(
                url, 
                data=payload, 
                timeout=TELEGRAM_TIMEOUT,
                headers={'User-Agent': 'FormTester/1.0'}
            )
            resp.raise_for_status()
            
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
            return True
            
        except requests.exceptions.SSLError as e:
            error_msg = f"SSL –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{TELEGRAM_MAX_RETRIES}): {e}"
            logger.warning(f"üîê {error_msg}")
            if attempt == TELEGRAM_MAX_RETRIES:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                return False
                
        except requests.exceptions.Timeout as e:
            error_msg = f"–¢–∞–π–º–∞—É—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{TELEGRAM_MAX_RETRIES}): {e}"
            logger.warning(f"‚è∞ {error_msg}")
            if attempt == TELEGRAM_MAX_RETRIES:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
                return False
                
        except requests.exceptions.ConnectionError as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{TELEGRAM_MAX_RETRIES}): {e}"
            logger.warning(f"üåê {error_msg}")
            if attempt == TELEGRAM_MAX_RETRIES:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API.")
                return False
                
        except requests.exceptions.RequestException as e:
            error_msg = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ HTTP (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{TELEGRAM_MAX_RETRIES}): {e}"
            logger.warning(f"üî∏ {error_msg}")
            if 'resp' in locals():
                logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram (—Å—Ç–∞—Ç—É—Å {resp.status_code}): {resp.text}")
            if attempt == TELEGRAM_MAX_RETRIES:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.")
                return False
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if attempt < TELEGRAM_MAX_RETRIES:
            delay = TELEGRAM_RETRY_DELAY * (2 ** (attempt - 1))  # 1s, 2s, 4s, 8s...
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(delay)
    
    return False


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∏ —Ñ–æ—Ä–º...")
    all_emails = fetch_recent_messages()
    result_report, debug_output, matched_msg_ids = check_forms(all_emails)

    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    logger.info("\n" + result_report)
    logger.info("\nüìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n" + debug_output)

    send_telegram_message("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º:</b>\n" + result_report)

    delete_emails(matched_msg_ids)
    logger.info("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
